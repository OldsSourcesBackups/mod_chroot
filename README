                                   mod_chroot

What is it?

   mod_chroot makes running Apache in a secure chroot environment easy. You
   don't need to create a special directory hierarchy containing /dev, /lib,
   /etc...

Why chroot?

   chroot(2) changes the root directory of a process to a directory other
   than "/". It means the process is locked inside a virtual filesystem root.
   If you configure your chroot jail properly, Apache and its child processes
   (think CGI scripts) won't be able to access anything except the jail.

   A non-root process is not able to leave a chroot jail. Still it's not wise
   to put device files, suid binaries or hardlinks inside the jail.

chroot - the hard way

   There are many documents about running programs inside a chroot jail. Some
   daemons (tinydns, dnscache, vsftpd) support it out of the box. For others
   (like Apache) you need to carefully build a "virtual root", containing
   every file the program may need. This usually includes:

     * C library
     * various other libraries (libssl? libm? libmysqlclient?)
     * resolver configuration files (/etc/nsswitch.conf, /etc/resolv.conf)
     * user files (/etc/passwd, /etc/group)
     * separate directory for log files
     * additional modules needed by the program (for Apache: mod_php and
       other modules)

   Creating this structure is a great fun. Run the program, read the error
   message, copy the missing file, start over. Now think about upgrading -
   you have to keep your "virtual root" current - if there is a bug in
   libssl, you need to put a new version in two places. Scared enough? Read
   on.

chroot - the mod_chroot way

   mod_chroot allows you to run Apache in a chroot jail without any
   additional files. The chroot() system call is performed at the end of
   startup procedure - when all libraries are loaded and log files open.
   There are still some things you have to keep in mind - see below.

   First, you need to build mod_chroot. This is covered by INSTALL.

   mod_chroot provides only one configuration directive - ChrootDir. It can
   only be used in main server configuration. You can't put ChrootDir inside
   a <Directory>, <Files>, <Location> sections or .htaccess files. Example:
   if you store your www files in /var/www, put

 ChrootDir /var/www

   in httpd.conf.

Module ordering

   Apache (and modules) need access to the whole filesystem during startup.
   That's why mod_chroot must be loaded as the last one - after all other
   modules are initialized and ready. To accomplish you need to put a
   LoadModule/AddModule line for mod_chroot as the first one.

   If you compiled all Apache modules as DSOs, this is easy. Just put

 LoadModule chroot_module /usr/lib/apache/1.3/mod_chroot.so

   before all other LoadModule lines. Remember to replace the second argument
   with a real path to mod_chroot.so

   If you have some static modules (and mod_chroot is compiled into Apache),
   you may need to use ClearModuleList to put mod_chroot at the beginning of
   the list, followed by other static modules you need.

 ClearModuleList
 AddModule mod_chroot.c
 AddModule ...
 AddModule ...

   You can get a list of all builtin modules with

 httpd -l

Download

   All published version of mod_chroot are available
   athttp://core.segfault.pl/~hobbit/mod_chroot/dist

Contact

   Mail addresses:

     * modchroot-bugs@core.segfault.pl - report bugs here.
     * modchroot@core.segfault.pl - mod_chroot mailing list. Questions,
       feature requests, announcements should go here.
       Send an empty e-mail to modchroot-subscribe@core.segfault.pl to
       subscribe. Users who are not subscribed are not allowed to post.

Prior art

   I needed a simple module just to perform chroot at startup. Before I
   started coding, I found mod_security which does this, among others. I
   didn't need URL normalization and other mod_security features so I decided
   to create my own module. It's code is very similar to mod_security (and
   one idea is shamelessly "borrowed"), with some sanity checks added.
   mod_security is developed by Ivan Ristic.

   Valid XHTML 1.0!
